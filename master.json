{
  "source": {
    "LICENSE": {
      "path": "LICENSE",
      "mode": "100644",
      "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
      "type": "blob"
    },
    "README.md": {
      "path": "README.md",
      "mode": "100644",
      "content": "github\n======\n\nGithub API for online IDEs\n",
      "type": "blob"
    },
    "main.coffee.md": {
      "path": "main.coffee.md",
      "mode": "100644",
      "content": "    Repository = require \"./repository\"\n\nGithub handles our connections to the Github API. May be optionally passed a\npromise that when fulfilled will set the authorization token.\n\n    Github = (tokenPromise) ->\n\nOur OAuth token for making API requests. We can still make anonymous requests\nwithout it.\n\n      token = null\n      \n      tokenPromise?.then (tokenValue) ->\n        token = tokenValue\n        \nHold an observable for the last request so we can track things like oauth scopes\nand rate limit.\n\n      lastRequest = Observable()\n\nMake a call to the github API. The path can be either a relative path such as\n`users/STRd6` or an absolute path like `https://api.github.com/users/octocat` or\n`user.url`.\n\nWe attach our `accessToken` if present.\n\n`api` returns a promise for easy chaining.\n\n      api = (path, options={}) ->\n        if path.match /^http/\n          url = path\n        else\n          url = \"https://api.github.com/#{path}\"\n        \n        options.headers ||= {}\n        \n        if token\n          options.headers[\"Authorization\"] = \"token #{token}\"\n    \n        options = Object.extend\n          url: url\n          type: \"GET\"\n          dataType: 'json'\n        , options\n\nPerform the ajax call and observe requests on success or failure\n\n        $.ajax(options).done (data, status, request) ->\n          lastRequest(request)\n        .fail lastRequest\n\nPublicly expose `api` method.\n\n      api: api\n\nAlso expose `lastRequest`.\n\n      lastRequest: lastRequest\n\nGetter/Setter for auth token.\n\n      token: (newValue) ->\n        if arguments.length > 0\n          token = newValue\n        else\n          token\n\nExpose the `Repository` constructor so that others can create repositories from\nraw data.\n\n      Repository: (data={}) -> \n        # Use our api for the repository\n        Object.extend data,\n          requester: api\n\n        Repository(data)\n\nGet a repository, returns a promise that will have a repository one day.\n\n      repository: (fullName) ->\n        # TODO: Consider returning a repository proxy immediately\n        #   may need to be weighed carefully with the tradeoffs of observables.\n        # TODO: Consider creating from a full url in addition to a full name.\n\n        api(\"repos/#{fullName}\")\n        .then (data) ->\n          Object.extend data,\n            requester: api\n\n          Repository(data)\n\nExpose `authorizationUrl` to instances as well.\n\n      authorizaionUrl: Github.authorizationUrl\n\nA URL that will authorize a user with the specified scope for the given app.\n\n    Github.authorizationUrl = (clientId, scope=\"user:email\") ->\n      \"https://github.com/login/oauth/authorize?client_id=#{clientId}&scope=#{scope}\"\n\n    module.exports = Github\n",
      "type": "blob"
    },
    "repository.coffee.md": {
      "path": "repository.coffee.md",
      "mode": "100644",
      "content": "Repsoitory\n==========\n\n`Repository` wraps the concept of a Github repository. It includes additional \ndata for the local working copy such as the current branch.\n\nAll of the methods return promises to allow for easy chaining and error\nreporting.\n\n    ApiGenerator = require('./api_generator')\n\nConstructor\n-----------\n\nCurrently the only parameter needed to initialize a repository instance is a\n`url`. This url is used as a base for the api calls.\n\n    Repository = (I={}) ->\n      Object.defaults I,\n        branch: \"master\"\n        defaultBranch: \"master\"\n\n      # Requester only matters runtime, not real data\n      # TODO: This is kind of a hack\n      requester = I.requester\n      delete I.requester\n      \n      # TODO: Think about converting underscored properties to camel case in an\n      # automatic and consistent way.\n\n      self = Model(I).observeAll()\n\nGet api helper methods from the api generator. With them we can do things like\n`get \"branches\"` to list branches of this repo.\n\n      {get, put, post, patch} = ApiGenerator self.url, requester\n\n      self.extend\n        infoDisplay: ->\n          \"#{I.fullName} (#{I.branch})\"\n\n        pullRequests: ->\n          get \"pulls\"\n    \n        createPullRequest: ({title}) ->\n          head = title.dasherize()\n    \n          self.switchToBranch(head)\n          .then(self.commitEmpty)\n          .then ->\n            post \"pulls\",\n              base: I.defaultBranch\n              head: head\n              title: title\n    \n        initPagesBranch: ->\n          branch = \"gh-pages\"\n        \n          # Post an empty tree to use for the base commit\n          # TODO: Learn how to post an empty tree\n          post \"git/trees\",\n            tree: [{\n              mode: \"1006444\"\n              path: \"tempest.txt\"\n              content: \"created by strd6.github.io/editor\"\n            }]\n          .then (data) ->\n            # Create the base commit for the branch\n            post \"git/commits\",\n              message: \"Initial gh-pages commit\"\n              tree: data.sha\n          .then (data) ->\n            # Create the branch based on the base commit\n            post \"git/refs\",\n              ref: \"refs/heads/#{branch}\"\n              sha: data.sha\n          \n        writeFile: (params) ->\n          {branch, path, content, message} = params\n    \n          get \"contents/#{path}\",\n            ref: branch\n          .then (data) ->\n            # The file existed, so we update it using the existing sha\n            put \"contents/#{path}\",\n              content: content\n              sha: data.sha\n              message: message\n              branch: branch\n          , (request) ->\n            # If we fail because the gh-pages branch doesn't exist try creating it and retrying\n            if request.responseJSON?.message is \"No commit found for the ref gh-pages\"\n              self.initPagesBranch().then ->\n                # Trying again after creating the gh-pages branch\n                self.writeFile(params)\n            # The file didn't exist so we create a new one\n            else if request.status is 404\n              put \"contents/#{path}\",\n                content: content\n                message: message\n                branch: branch\n            else\n              Deferred().reject(arguments...)\n    \n        latestTree: (branch=self.branch()) ->\n          get(\"git/refs/heads/#{branch}\")\n          .then (data) ->\n            get data.object.url\n          .then (data) ->\n            get \"#{data.tree.url}?recursive=1\"\n          .then (data) ->\n            files = data.tree.select (file) ->\n              file.type is \"blob\"\n      \n            # Gather the data for each file\n            $.when.apply(null, files.map (datum) ->\n              get(datum.url)\n              .then (data) ->\n                Object.extend(datum, data)\n            )\n          .then (results...) -> \n            results\n    \n        commitTree: ({message, tree}) ->\n          branch = self.branch()\n          message ?= \"Updated in browser at strd6.github.io/editor\"\n          \n          unless tree\n            throw Error(\"Must pass in a tree\")\n            \n          # TODO: Is there a cleaner way to pass this through promises?\n          latestCommitSha = null\n    \n          get(\"git/refs/heads/#{branch}\")\n          .then (data) ->\n            latestCommitSha = data.object.sha\n            \n            post \"git/trees\",\n              tree: tree\n          .then (data) ->\n            # Create another commit\n            post \"git/commits\",\n              parents: [latestCommitSha]\n              message: message\n              tree: data.sha\n          .then (data) ->\n            # Update the branch head\n            patch \"git/refs/heads/#{branch}\",\n              sha: data.sha\n        \n        # TODO: this is currently a hack because we can't create a pull request\n        # if there are no different commits\n        commitEmpty: ->\n          branch = self.branch()\n          latestCommit = null\n          \n          get(\"git/refs/heads/#{branch}\")\n          .then (data) ->\n            get data.object.url\n          .then (data) ->\n            # Create another commit\n            post \"git/commits\",\n              parents: [data.sha]\n              message: \"This commit intentionally left blank\"\n              tree: data.tree.sha\n          .then (data) ->\n            # Update the branch head\n            patch \"git/refs/heads/#{branch}\",\n              sha: data.sha\n    \n        switchToBranch: (branch) ->\n          ref = \"refs/heads/#{branch}\"\n          \n          setBranch = (data) ->\n            self.branch(branch)\n            \n            return data\n    \n          get(\"git/#{ref}\")\n          .then setBranch # Success\n          , (request) -> # Failure\n            branchNotFound = (request.status is 404)\n    \n            if branchNotFound\n              # Create branch if it doesn't exist\n              # Use our current branch as a base\n              get(\"git/refs/heads/#{self.branch()}\")\n              .then (data) ->\n                post \"git/refs\",\n                  ref: ref\n                  sha: data.object.sha\n              .then(setBranch)\n            else\n              Deferred().reject(arguments...)\n    \n        mergeInto: (branch=self.defaultBranch()) ->\n          post \"merges\",\n            base: branch\n            head: self.branch()\n            \n        pullFromBranch: (branch=self.defaultBranch()) ->\n          post \"merges\",\n            base: self.branch()\n            head: branch\n    \n        publish: ({html, script, json}) ->\n          branch = self.branch()\n          message = \"Built #{branch} in browser in strd6.github.io/editor\"\n    \n          if branch is \"master\"\n            path = \"index.html\"\n          else\n            path = \"#{branch}.html\"\n    \n          # Assuming git repo with gh-pages branch\n          publishBranch = \"gh-pages\"\n    \n          # TODO: Make this one commit rather than a sequence of write files\n          # create <branch>.html\n          self.writeFile\n            path: path\n            content: Base64.encode(html)\n            branch: publishBranch\n            message: message\n          .then ->\n            self.writeFile\n              path: \"#{branch}.js\"\n              content: Base64.encode(script)\n              branch: publishBranch\n              message: message\n          .then ->\n            self.writeFile\n              path: \"#{branch}.json\"\n              content: Base64.encode(json)\n              branch: publishBranch\n              message: message\n    \n      return self\n\n    module.exports = Repository\n",
      "type": "blob"
    },
    "api_generator.coffee.md": {
      "path": "api_generator.coffee.md",
      "mode": "100644",
      "content": "\nGenerate all those fun API verbs: `get`, `put`, `post`, `patch`, `delete`\n\nOur helpers need a root to base off of. The root is a function that returns a\nstring. The requester does the actual api calls, these just set it up easily.\n\n    ApiGenerator = (root, requester) ->\n\nConfigure the options for a request by stringifying any data to be added to the\nrequest body, and setting the appropriate type. `get` requests don't call this\nas the default type is `get` and they put their params in the querystring.\n\n      requestOptions = (type, data) ->\n        type: type\n        data: JSON.stringify(data)\n\nIf our request is absolute we use that url, otherwise we get the base url from\nour root and append the path. This allows us to follow HATEOS resource urls more\neasily.\n\n      api = (path, options) ->\n        if path.match /^http/\n          url = path\n        else\n          url = \"#{root()}/#{path}\"\n              \n        requester url, options\n\nExpose the basic api method in our returned object.\n\n      api: api\n\n      get: (path, data) ->\n        api path, data: data\n\n      put: (path, data) ->\n        api(path, requestOptions(\"PUT\", data))\n\n      post: (path, data) ->\n        api(path, requestOptions(\"POST\", data))\n\n      patch: (path, data) ->\n        api path, requestOptions(\"PATCH\", data)\n\n`delete` is a keyword in JS, so I guess we'll go with all caps. We maybe should\ngo with all caps for everything, but it seems so loud.\n\n      DELETE: (path, data) ->\n        api path, requestOptions(\"DELETE\", data)\n\n    module.exports = ApiGenerator\n",
      "type": "blob"
    }
  },
  "distribution": {
    "main": {
      "path": "main",
      "content": "(function() {\n  var Github, Repository;\n\n  Repository = require(\"./repository\");\n\n  Github = function(tokenPromise) {\n    var api, lastRequest, token;\n    token = null;\n    if (tokenPromise != null) {\n      tokenPromise.then(function(tokenValue) {\n        return token = tokenValue;\n      });\n    }\n    lastRequest = Observable();\n    api = function(path, options) {\n      var url;\n      if (options == null) {\n        options = {};\n      }\n      if (path.match(/^http/)) {\n        url = path;\n      } else {\n        url = \"https://api.github.com/\" + path;\n      }\n      options.headers || (options.headers = {});\n      if (token) {\n        options.headers[\"Authorization\"] = \"token \" + token;\n      }\n      options = Object.extend({\n        url: url,\n        type: \"GET\",\n        dataType: 'json'\n      }, options);\n      return $.ajax(options).done(function(data, status, request) {\n        return lastRequest(request);\n      }).fail(lastRequest);\n    };\n    return {\n      api: api,\n      lastRequest: lastRequest,\n      token: function(newValue) {\n        if (arguments.length > 0) {\n          return token = newValue;\n        } else {\n          return token;\n        }\n      },\n      Repository: function(data) {\n        if (data == null) {\n          data = {};\n        }\n        Object.extend(data, {\n          requester: api\n        });\n        return Repository(data);\n      },\n      repository: function(fullName) {\n        return api(\"repos/\" + fullName).then(function(data) {\n          Object.extend(data, {\n            requester: api\n          });\n          return Repository(data);\n        });\n      },\n      authorizaionUrl: Github.authorizationUrl\n    };\n  };\n\n  Github.authorizationUrl = function(clientId, scope) {\n    if (scope == null) {\n      scope = \"user:email\";\n    }\n    return \"https://github.com/login/oauth/authorize?client_id=\" + clientId + \"&scope=\" + scope;\n  };\n\n  module.exports = Github;\n\n}).call(this);\n",
      "type": "blob"
    },
    "repository": {
      "path": "repository",
      "content": "(function() {\n  var ApiGenerator, Repository,\n    __slice = [].slice;\n\n  ApiGenerator = require('./api_generator');\n\n  Repository = function(I) {\n    var get, patch, post, put, requester, self, _ref;\n    if (I == null) {\n      I = {};\n    }\n    Object.defaults(I, {\n      branch: \"master\",\n      defaultBranch: \"master\"\n    });\n    requester = I.requester;\n    delete I.requester;\n    self = Model(I).observeAll();\n    _ref = ApiGenerator(self.url, requester), get = _ref.get, put = _ref.put, post = _ref.post, patch = _ref.patch;\n    self.extend({\n      infoDisplay: function() {\n        return \"\" + I.fullName + \" (\" + I.branch + \")\";\n      },\n      pullRequests: function() {\n        return get(\"pulls\");\n      },\n      createPullRequest: function(_arg) {\n        var head, title;\n        title = _arg.title;\n        head = title.dasherize();\n        return self.switchToBranch(head).then(self.commitEmpty).then(function() {\n          return post(\"pulls\", {\n            base: I.defaultBranch,\n            head: head,\n            title: title\n          });\n        });\n      },\n      initPagesBranch: function() {\n        var branch;\n        branch = \"gh-pages\";\n        return post(\"git/trees\", {\n          tree: [\n            {\n              mode: \"1006444\",\n              path: \"tempest.txt\",\n              content: \"created by strd6.github.io/editor\"\n            }\n          ]\n        }).then(function(data) {\n          return post(\"git/commits\", {\n            message: \"Initial gh-pages commit\",\n            tree: data.sha\n          });\n        }).then(function(data) {\n          return post(\"git/refs\", {\n            ref: \"refs/heads/\" + branch,\n            sha: data.sha\n          });\n        });\n      },\n      writeFile: function(params) {\n        var branch, content, message, path;\n        branch = params.branch, path = params.path, content = params.content, message = params.message;\n        return get(\"contents/\" + path, {\n          ref: branch\n        }).then(function(data) {\n          return put(\"contents/\" + path, {\n            content: content,\n            sha: data.sha,\n            message: message,\n            branch: branch\n          });\n        }, function(request) {\n          var _ref1, _ref2;\n          if (((_ref1 = request.responseJSON) != null ? _ref1.message : void 0) === \"No commit found for the ref gh-pages\") {\n            return self.initPagesBranch().then(function() {\n              return self.writeFile(params);\n            });\n          } else if (request.status === 404) {\n            return put(\"contents/\" + path, {\n              content: content,\n              message: message,\n              branch: branch\n            });\n          } else {\n            return (_ref2 = Deferred()).reject.apply(_ref2, arguments);\n          }\n        });\n      },\n      latestTree: function(branch) {\n        if (branch == null) {\n          branch = self.branch();\n        }\n        return get(\"git/refs/heads/\" + branch).then(function(data) {\n          return get(data.object.url);\n        }).then(function(data) {\n          return get(\"\" + data.tree.url + \"?recursive=1\");\n        }).then(function(data) {\n          var files;\n          files = data.tree.select(function(file) {\n            return file.type === \"blob\";\n          });\n          return $.when.apply(null, files.map(function(datum) {\n            return get(datum.url).then(function(data) {\n              return Object.extend(datum, data);\n            });\n          }));\n        }).then(function() {\n          var results;\n          results = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return results;\n        });\n      },\n      commitTree: function(_arg) {\n        var branch, latestCommitSha, message, tree;\n        message = _arg.message, tree = _arg.tree;\n        branch = self.branch();\n        if (message == null) {\n          message = \"Updated in browser at strd6.github.io/editor\";\n        }\n        if (!tree) {\n          throw Error(\"Must pass in a tree\");\n        }\n        latestCommitSha = null;\n        return get(\"git/refs/heads/\" + branch).then(function(data) {\n          latestCommitSha = data.object.sha;\n          return post(\"git/trees\", {\n            tree: tree\n          });\n        }).then(function(data) {\n          return post(\"git/commits\", {\n            parents: [latestCommitSha],\n            message: message,\n            tree: data.sha\n          });\n        }).then(function(data) {\n          return patch(\"git/refs/heads/\" + branch, {\n            sha: data.sha\n          });\n        });\n      },\n      commitEmpty: function() {\n        var branch, latestCommit;\n        branch = self.branch();\n        latestCommit = null;\n        return get(\"git/refs/heads/\" + branch).then(function(data) {\n          return get(data.object.url);\n        }).then(function(data) {\n          return post(\"git/commits\", {\n            parents: [data.sha],\n            message: \"This commit intentionally left blank\",\n            tree: data.tree.sha\n          });\n        }).then(function(data) {\n          return patch(\"git/refs/heads/\" + branch, {\n            sha: data.sha\n          });\n        });\n      },\n      switchToBranch: function(branch) {\n        var ref, setBranch;\n        ref = \"refs/heads/\" + branch;\n        setBranch = function(data) {\n          self.branch(branch);\n          return data;\n        };\n        return get(\"git/\" + ref).then(setBranch, function(request) {\n          var branchNotFound, _ref1;\n          branchNotFound = request.status === 404;\n          if (branchNotFound) {\n            return get(\"git/refs/heads/\" + (self.branch())).then(function(data) {\n              return post(\"git/refs\", {\n                ref: ref,\n                sha: data.object.sha\n              });\n            }).then(setBranch);\n          } else {\n            return (_ref1 = Deferred()).reject.apply(_ref1, arguments);\n          }\n        });\n      },\n      mergeInto: function(branch) {\n        if (branch == null) {\n          branch = self.defaultBranch();\n        }\n        return post(\"merges\", {\n          base: branch,\n          head: self.branch()\n        });\n      },\n      pullFromBranch: function(branch) {\n        if (branch == null) {\n          branch = self.defaultBranch();\n        }\n        return post(\"merges\", {\n          base: self.branch(),\n          head: branch\n        });\n      },\n      publish: function(_arg) {\n        var branch, html, json, message, path, publishBranch, script;\n        html = _arg.html, script = _arg.script, json = _arg.json;\n        branch = self.branch();\n        message = \"Built \" + branch + \" in browser in strd6.github.io/editor\";\n        if (branch === \"master\") {\n          path = \"index.html\";\n        } else {\n          path = \"\" + branch + \".html\";\n        }\n        publishBranch = \"gh-pages\";\n        return self.writeFile({\n          path: path,\n          content: Base64.encode(html),\n          branch: publishBranch,\n          message: message\n        }).then(function() {\n          return self.writeFile({\n            path: \"\" + branch + \".js\",\n            content: Base64.encode(script),\n            branch: publishBranch,\n            message: message\n          });\n        }).then(function() {\n          return self.writeFile({\n            path: \"\" + branch + \".json\",\n            content: Base64.encode(json),\n            branch: publishBranch,\n            message: message\n          });\n        });\n      }\n    });\n    return self;\n  };\n\n  module.exports = Repository;\n\n}).call(this);\n",
      "type": "blob"
    },
    "api_generator": {
      "path": "api_generator",
      "content": "(function() {\n  var ApiGenerator;\n\n  ApiGenerator = function(root, requester) {\n    var api, requestOptions;\n    requestOptions = function(type, data) {\n      return {\n        type: type,\n        data: JSON.stringify(data)\n      };\n    };\n    api = function(path, options) {\n      var url;\n      if (path.match(/^http/)) {\n        url = path;\n      } else {\n        url = \"\" + (root()) + \"/\" + path;\n      }\n      return requester(url, options);\n    };\n    return {\n      api: api,\n      get: function(path, data) {\n        return api(path, {\n          data: data\n        });\n      },\n      put: function(path, data) {\n        return api(path, requestOptions(\"PUT\", data));\n      },\n      post: function(path, data) {\n        return api(path, requestOptions(\"POST\", data));\n      },\n      patch: function(path, data) {\n        return api(path, requestOptions(\"PATCH\", data));\n      },\n      DELETE: function(path, data) {\n        return api(path, requestOptions(\"DELETE\", data));\n      }\n    };\n  };\n\n  module.exports = ApiGenerator;\n\n}).call(this);\n",
      "type": "blob"
    }
  },
  "entryPoint": "main",
  "dependencies": {},
  "repository": {
    "full_name": "STRd6/github",
    "branch": "master"
  },
  "progenitor": {
    "url": "http://strd6.github.io/editor/"
  }
}